{"version":3,"sources":["assets/dreamShareAkatsukiCloud.png","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","event","setState","userInput","target","value","handleTitle","inputTitle","handleClick","preventDefault","dbRef","database","ref","state","dreamObjectTwo","dream","title","vote","comments","key","push","setStorage","errorMessage","window","location","swal","text","icon","button","handleVote","voteId","localStorage","getItem","once","snapshot","newValue","val","set","removeItem","document","getElementsByClassName","classList","remove","handleComment","inputComment","handleShowAddComment","toggle","handleAddComment","commentIndex","length","setTimeout","querySelector","handleRemove","dreamId","buttons","dangerMode","then","willDelete","child","handleRemoveComment","i","dreams","limit","on","data","newDreamsArray","addEventListener","this","handleLoad","removeEventListener","status","localStorageItem","localItemStatus","setItem","forEach","add","className","idname","src","cloudImg","alt","action","htmlFor","onChange","type","id","placeholder","maxLength","name","rows","onClick","map","dreamObject","aria-label","faHeart","slice","faComment","faTimes","faShare","item","href","faAngleUp","rel","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e44b09e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dreamShareAkatsukiCloud.98b98507.png\";","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCgA-RgJ1ifzC4V4GRLZzEkxkNWAOLi4lY\",\r\n    authDomain: \"project-5-test-120f1.firebaseapp.com\",\r\n    databaseURL: \"https://project-5-test-120f1.firebaseio.com\",\r\n    projectId: \"project-5-test-120f1\",\r\n    storageBucket: \"project-5-test-120f1.appspot.com\",\r\n    messagingSenderId: \"120232366961\",\r\n    appId: \"1:120232366961:web:3409e30e67044ea2aedcd0\"\r\n};\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase;\r\n","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { faComment } from '@fortawesome/free-solid-svg-icons';\r\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faShare } from '@fortawesome/free-solid-svg-icons';\r\nimport swal from 'sweetalert';\r\nimport cloudImg from './assets/dreamShareAkatsukiCloud.png' // relative path to image \r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dreams: [],\r\n      userInput: '',\r\n      inputTitle: '',\r\n      inputComment: '',\r\n      limit: 7,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // pull data from firebase to display\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (snapshot) => {\r\n\r\n      const data = snapshot.val();\r\n\r\n      const newDreamsArray = [];\r\n\r\n      for (let key in data) {\r\n        newDreamsArray.push({\r\n          key: key,\r\n          data: data[key]\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        dreams: newDreamsArray\r\n      })\r\n    })\r\n\r\n    window.addEventListener('load', this.handleLoad);\r\n  }\r\n\r\n  componentWillUnmount() { \r\n    window.removeEventListener('load', this.handleLoad)  \r\n  }\r\n\r\n  handleLoad() {\r\n    const loader = document.getElementsByClassName('preloader');\r\n    loader[0].classList.toggle(\"loaded\");\r\n   }\r\n\r\n  // dream content event listener\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value\r\n    })\r\n  }\r\n\r\n  // title event listener\r\n  handleTitle = (event) => {\r\n    this.setState({\r\n      inputTitle: event.target.value\r\n    })\r\n  }\r\n\r\n  // push dream input data to firebase\r\n  handleClick= (event) => {\r\n    event.preventDefault();\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    if (this.state.userInput !== \"\" && this.state.inputTitle !== \"\") {\r\n      // push dream object to firebase\r\n      const dreamObjectTwo = {\r\n        dream: this.state.userInput,\r\n        title: this.state.inputTitle,\r\n        vote: 0,\r\n        comments: ['']\r\n      }\r\n\r\n      // push dream to db AND set local storage item as dream entry author\r\n      const key = dbRef.push(dreamObjectTwo).key;\r\n      this.setStorage(`${key}author`, 'yes');\r\n\r\n      // reset error handling\r\n      this.setState({\r\n        errorMessage: '',\r\n      })\r\n\r\n      window.location = \"#addedDream\";\r\n    } else {\r\n      // error handling\r\n      swal({\r\n        text: \"Please give your entry a title and content before submitting\",\r\n        icon: \"warning\",\r\n        button: \"OK\",\r\n      });\r\n    }\r\n\r\n    // clear input text\r\n    this.setState({\r\n      inputTitle: '',\r\n      userInput: ''\r\n    })\r\n  }\r\n\r\n  // upvote selected dream\r\n  handleVote = (voteId) => {\r\n    const localStorageItem = window.localStorage.getItem(`${voteId}liked`);\r\n    if (localStorageItem) {\r\n      const dbRef = firebase.database().ref(`/${voteId}`);\r\n  \r\n      dbRef.once('value', (snapshot) => {\r\n        const newValue = snapshot.val();\r\n        newValue.vote--;\r\n  \r\n        dbRef.set(newValue);\r\n        // remove from local storage\r\n        window.localStorage.removeItem(`${voteId}liked`, 'yes');\r\n        // change styling\r\n        document.getElementsByClassName(`vote${voteId}`)[0].classList.remove(\"liked\");\r\n      })\r\n    } else {\r\n      const dbRef = firebase.database().ref(`/${voteId}`);\r\n  \r\n      dbRef.once('value', (snapshot) => {\r\n        const newValue = snapshot.val();\r\n        newValue.vote++;\r\n  \r\n        dbRef.set(newValue);\r\n        this.setStorage(`${voteId}liked`, 'yes');\r\n      }) \r\n    }\r\n  }\r\n\r\n  // comment event listener\r\n  handleComment = (event) => {\r\n    this.setState({\r\n      inputComment: event.target.value\r\n    })\r\n  }\r\n\r\n  // show add comment option\r\n  handleShowAddComment = (key) => {\r\n    document.getElementsByClassName(`${key}input`)[0].classList.toggle(\"show\");\r\n  }\r\n\r\n  // add comment to a dream\r\n  handleAddComment = (key) => {\r\n    const dbRef = firebase.database().ref(`/${key}`);\r\n\r\n    if (this.state.inputComment !== \"\") {\r\n      dbRef.once('value', (snapshot) => {\r\n        const newValue = snapshot.val();\r\n        newValue.comments.push(this.state.inputComment);\r\n        dbRef.set(newValue);\r\n        const commentIndex = newValue.comments.length - 1;\r\n        this.setStorage(`${key}${commentIndex}`, 'yes');\r\n      }) \r\n\r\n      // hide comment input\r\n      setTimeout(() => {\r\n        document.getElementsByClassName(`${key}input`)[0].classList.remove(\"show\");\r\n      }, 0)\r\n    } else {\r\n      swal({\r\n        text: \"Sorry, can't submit an empty comment\",\r\n        button: \"OK\",\r\n      });\r\n    }\r\n\r\n    // clear input value\r\n    document.querySelector(`.dream${key} .commentSectionInput`).value = '';\r\n    this.setState({\r\n      inputComment: ''\r\n    })\r\n  }\r\n\r\n  // delete a dream\r\n  handleRemove = (dreamId) => {\r\n    const localStorageItem = window.localStorage.getItem(`${dreamId}author`);\r\n    if (localStorageItem) {\r\n      swal({\r\n        title: \"Are you sure?\",\r\n        text: \"Once deleted, you'll lose this dream forever\",\r\n        icon: \"warning\",\r\n        buttons: true,\r\n        dangerMode: true,\r\n      })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          swal(\"Your Dream has been deleted!\", {\r\n            icon: \"success\",\r\n          });\r\n          const dbRef = firebase.database().ref();\r\n  \r\n          dbRef.child(dreamId).remove();\r\n        } else {\r\n          swal(\"Your Dream is safe!\");\r\n        }\r\n      });\r\n    } else {\r\n      swal({\r\n        text: \"Trying to delete someone else's dream?\",\r\n        icon: \"warning\",\r\n        button: \"My Bad\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleRemoveComment = (dreamId, i) => {\r\n    const localStorageItem = window.localStorage.getItem(`${dreamId}${i + 1}`);\r\n    if (localStorageItem) {\r\n      swal({\r\n        title: \"Are you sure?\",\r\n        text: \"Once deleted, you'll lose this comment forever\",\r\n        icon: \"warning\",\r\n        buttons: true,\r\n        dangerMode: true,\r\n      })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          swal(\"Your comment has been deleted!\", {\r\n            icon: \"success\",\r\n          });\r\n          const dbRef = firebase.database().ref();\r\n  \r\n          dbRef.child(`${dreamId}/comments/${i + 1}`).remove();\r\n          window.localStorage.removeItem(`${dreamId}${i + 1}`);\r\n        } else {\r\n          swal(\"Your comment is safe!\");\r\n        }\r\n      });\r\n    } else {\r\n      swal({\r\n        text: \"Trying to delete someone else's comment?\",\r\n        icon: \"warning\",\r\n        button: \"My Bad\",\r\n      });\r\n    }\r\n  }\r\n\r\n  // set dream entry/comment ownership to local storage\r\n  setStorage(key, status) {\r\n    const localStorageItem = key\r\n    const localItemStatus = [\r\n            // will hold either author, liked, or index of comment written by user\r\n            status\r\n    ]\r\n    window.localStorage.setItem(localStorageItem, localItemStatus);\r\n}\r\n\r\n  render() {\r\n    // pull storage data for styling\r\n    const dreams = this.state.dreams\r\n    dreams.forEach((i) => {\r\n      if (window.localStorage.getItem(`${i.key}liked`)) {\r\n        setTimeout(() => {\r\n          document.getElementsByClassName(`vote${i.key}`)[0].classList.add(\"liked\");\r\n        }, 0)\r\n      }\r\n    });\r\n\r\n    return (\r\n      <main className={'app'} idname=\"top\">\r\n        <div className='preloader'>\r\n          <img src={cloudImg} alt=\"a pulsing cloud while app content loads\" />\r\n        </div>\r\n        <div className=\"appBackground\">\r\n          <div className='backgroundImg'></div>\r\n          <section className=\"top\">\r\n            <div>\r\n              <h1>Dream Share</h1>\r\n              <h2>A place for everyone to document their dreams and explore the bizarre world of the subconcious</h2>\r\n              <form action=\"submit\">\r\n                <label htmlFor=\"newTitle\">give your dream a title</label>\r\n                <input onChange={this.handleTitle} value={this.state.inputTitle}type=\"text\" id=\"newTitle\" className=\"titleInput\" placeholder=\"Title\" maxLength=\"20\"/>\r\n                <label htmlFor=\"newDream\">tell us about a dream you've had</label>\r\n                <textarea \r\n                    name=\"newDream\" \r\n                    id=\"newDream\" \r\n                    className=\"dreamInput\" \r\n                    rows=\"20\" \r\n                    onChange={this.handleChange}\r\n                    value={this.state.userInput} \r\n                    maxLength=\"1100\"\r\n                    placeholder=\"One night I dreamt...\"\r\n                ></textarea>\r\n                <button className=\"addDream\" onClick={this.handleClick}>Share Dream</button>\r\n              </form>\r\n            </div>\r\n          </section>\r\n          <section className=\"displaySection\">\r\n            <ul className=\"dreamDisplay wrapper\">\r\n              {\r\n                this.state.dreams.map( (dreamObject) => {\r\n                  return (\r\n                  <li key={dreamObject.key} className={`returnDream dream${dreamObject.key}`}>\r\n                    <h2>{dreamObject.data.title}</h2>\r\n                    <p>{dreamObject.data.dream}</p>\r\n                    <div className=\"upVote\">\r\n                      <p>{dreamObject.data.vote}</p>\r\n                      <button aria-label=\"like this dream\" className={`vote${dreamObject.key} voteButton`} name=\"like entry Button\" onClick={() => this.handleVote(dreamObject.key)}><FontAwesomeIcon icon={faHeart}/></button>\r\n                      <p>{dreamObject.data.comments.slice(1).length}</p>\r\n                      <button aria-label=\"add a comment to this dream entry\" className=\"commentbutton\" name=\"add comment button\" onClick={() => this.handleShowAddComment(dreamObject.key)}><FontAwesomeIcon icon={faComment}/></button>\r\n                    </div>\r\n                    <button aria-label=\"remove this dream entry\" className=\"removeButton\" name=\"remove entry button\" onClick={() => this.handleRemove(dreamObject.key)}><FontAwesomeIcon icon={faTimes}/></button>\r\n                    <form action=\"submit\" className={`${dreamObject.key}input commentInput`}>\r\n                      <label htmlFor=\"newComment\" aria-label=\"add a comment\"></label>\r\n                      <input onChange={this.handleComment} value={this.state.dreams.inputComment}type=\"text\" className={'commentSectionInput'} id={`${dreamObject.key}newComment newComment`} placeholder=\"Comment\" maxLength=\"50\"/>\r\n                      <i className=\"addComment\" onClick={() => this.handleAddComment(dreamObject.key)}><FontAwesomeIcon icon={faShare}/></i>\r\n                    </form>\r\n                    <div className=\"commentSection\">\r\n                        {\r\n                          dreamObject.data.comments.slice(1).map((item, i) => \r\n                          <div key={i} className=\"commentChild\">\r\n                            <p>{item}</p>\r\n                            <button aria-label=\"remove this comment\"  name=\"remove comment button\" className='removeCommentButton' onClick={() => this.handleRemoveComment(dreamObject.key, i)}><FontAwesomeIcon icon={faTimes}/></button>\r\n                          </div>\r\n                          )\r\n                        }\r\n                    </div>\r\n                  </li>\r\n                  )\r\n                })\r\n              }\r\n            </ul>\r\n          </section>\r\n          <footer id='addedDream'>\r\n            <a aria-label=\"Back to top\" href=\"#top\" id=\"backToTop\"><FontAwesomeIcon icon={faAngleUp}/></a>\r\n            <p>Created by <a href=\"https://alianicodes.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Arman Aliani</a></p>\r\n          </footer>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}